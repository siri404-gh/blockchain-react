balance = web3.fromWei(eth.getBalance(eth.accounts[0]), "ether");
web3.admin.getPeers()
web3.admin.peers
web.admin.peers
web3.admin.peers
loadScript("./mining.js")
loadScript("./DVPinitialize.js")
loadScript("./DVPutils.js")
loadScript("./events.js")
loadScript("./DVPinitialize.js")
loadScript("./DVPutils.js")
loadScript("./events.js")
loadScript("./mining.js")
loadScript("./DVPinitialize.js")
loadScript("./DVPutils.js")
loadScript("./events.js")
loadScript("./mining.js")
loadScript("./DVPinitialize.js")
loadScript("./DVPutils.js")
loadScript("./events.js")
loadScript("./DVPinitialize.js")
loadScript("./DVPutils.js")
loadScript("./events.js")
loadScript("./mining.js")
loadScript("./DVPinitialize.js")
loadScript("./DVPutils.js")
loadScript("./events.js")
loadScript("./mining.js")
loadScript("./DVPinitialize.js")
loadScript("./DVPutils.js")
loadScript("./events.js")
loadScript("./mining.js")
edit
loadScript("./mining.js")
loadScript("./DVPinitialize.js")
loadScript("./DVPutils.js")
loadScript("./events.js")
loadScript("./mining.js")
-- Initialize positions in chain and db + other paratemeters
loadScript("./DVPinitialize.js")
loadScript("./DVPutils.js")
eth.mining
web3.net.peerCount
loadScript("./mining.js")
loadScript("./DVPinitialize.js")
loadScript("./DVPutils.js")
loadScript("./events.js")
admin.setSolc("F:/SKPTRC/node3/solc");
// Create the contract source code
var SkipTraceSource = "contract Sequence { uint sequenceNo; function Sequence() { sequenceNo = 0; } function nextVal() returns (uint number) { return ++sequenceNo; } } contract CustomerDetails { struct CustomerData { uint customerID; address bankID; string profile; string phone; string addresses; string employer; string products; string remarks; } mapping (uint => CustomerData) public custDataOf; } contract CustomerSkipTrace is Sequence, CustomerDetails { event SkipTraceAddEvent(uint customerID, address bankID, string profile, string phone, string addresses, string employer, string products, string remarks); event SkipTraceQueryEvent(uint customerID, address bankID, string profile, string phone, string addresses, string employer, string products, string remarks); event SkipTraceUpdateEvent(uint customerID, address bankID, string profile, string phone, string addresses, string employer, string products, string remarks); function addSkipTraceRecord(string profile, string phone, string addresses, string employer, string products, string remarks) { uint customerID = nextVal(); address bankID = msg.sender; custDataOf[customerID].customerID = customerID; custDataOf[customerID].bankID = bankID; custDataOf[customerID].profile = profile; custDataOf[customerID].phone = phone; custDataOf[customerID].addresses = addresses; custDataOf[customerID].employer = employer; custDataOf[customerID].products = products; custDataOf[customerID].remarks = remarks; SkipTraceAddEvent(customerID, bankID, profile, phone, addresses, employer, products, remarks); } function querySkipTraceRecord(uint customerID) { SkipTraceQueryEvent(custDataOf[customerID].customerID, custDataOf[customerID].bankID, custDataOf[customerID].profile, custDataOf[customerID].phone, custDataOf[customerID].addresses, custDataOf[customerID].employer, custDataOf[customerID].products, custDataOf[customerID].remarks); } function updateSkipTraceRecord(uint customerID, string profile, string phone, string addresses, string employer, string products, string remarks) { address bankID = msg.sender; custDataOf[customerID].customerID = customerID; custDataOf[customerID].bankID = bankID; custDataOf[customerID].profile = profile; custDataOf[customerID].phone = phone; custDataOf[customerID].addresses = addresses; custDataOf[customerID].employer = employer; custDataOf[customerID].products = products; custDataOf[customerID].remarks = remarks; SkipTraceUpdateEvent(customerID, bankID, profile, phone, addresses, employer, products, remarks); } function reset() { for (uint i = 1; i<=sequenceNo; i++){ delete custDataOf[i]; } } }"
// Compile the source with solc - Solidity Compiler
var SkipTraceCompiled = eth.compile.solidity(SkipTraceSource)
// Extracts info from contract, print json serialisation on console
SkipTraceCompiled.CustomerSkipTrace.info
loadScript("./mining.js")
loadScript("./initialize.js")
loadScript("./utils.js")
loadScript("./events.js")
-- Start Miner
loadScript("./mining.js")
-- Initialize positions in chain and db + other paratemeters
loadScript("./initialize.js")
loadScript("./utils.js")
loadScript("./events.js")
-- Start Miner
loadScript("./mining.js")
-- Initialize positions in chain and db + other paratemeters
loadScript("./initialize.js")
loadScript("./utils.js")
loadScript("./events.js")
querySkipTraceRecordOnChain(1);
getRecordCountOnChain();
loadScript("./mining.js")
-- Start Miner
loadScript("./mining.js")
-- Initialize positions in chain and db + other paratemeters
loadScript("./initialize.js")
loadScript("./utils.js")
loadScript("./events.js")
loadScript("./mining.js")
-- Initialize positions in chain and db + other paratemeters
loadScript("./initialize.js")
loadScript("./utils.js")
loadScript("./events.js")
loadScript("./mining.js")
-- Initialize positions in chain and db + other paratemeters
loadScript("./initialize.js")
loadScript("./utils.js")
loadScript("./events.js")
loadScript("./mining.js")
-- Initialize positions in chain and db + other paratemeters
loadScript("./initialize.js")
loadScript("./utils.js")
loadScript("./events.js")
loadScript("./mining.js")
-- Initialize positions in chain and db + other paratemeters
loadScript("./initialize.js")
loadScript("./utils.js")
loadScript("./events.js")
getRecordCountOnChain();
loadScript("./mining.js")
-- Initialize positions in chain and db + other paratemeters
loadScript("./initialize.js")
loadScript("./utils.js")
loadScript("./events.js")
loadScript("./mining.js")
-- Initialize positions in chain and db + other paratemeters
loadScript("./initialize.js")
loadScript("./utils.js")
loadScript("./events.js")
loadScript("./mining.js")
-- Initialize positions in chain and db + other paratemeters
loadScript("./initialize.js")
loadScript("./utils.js")
loadScript("./events.js")
loadScript("./mining.js")
-- Initialize positions in chain and db + other paratemeters
loadScript("./initialize.js")
loadScript("./utils.js")
loadScript("./events.js")
loadScript("./mining.js")
-- Initialize positions in chain and db + other paratemeters
loadScript("./initialize.js")
loadScript("./utils.js")
loadScript("./events.js")
loadScript("./mining.js")
-- Initialize positions in chain and db + other paratemeters
loadScript("./initialize.js")
loadScript("./utils.js")
loadScript("./events.js")
loadScript("./mining.js")
-- Initialize positions in chain and db + other paratemeters
loadScript("./initialize.js")
loadScript("./utils.js")
loadScript("./events.js")
loadScript("./mining.js")
loadScript("./initialize.js")
loadScript("./utils.js")
loadScript("./initialize.js")
loadScript("./utils.js")
loadScript("./events.js")
-- Start Miner
loadScript("./mining.js")
-- Initialize positions in chain and db + other paratemeters
loadScript("./initialize.js")
loadScript("./utils.js")
loadScript("./events.js")
ass
ei
loadScript("./mining.js")
-- Initialize positions in chain and db + other paratemeters
loadScript("./initialize.js")
loadScript("./utils.js")
loadScript("./events.js")
a3
pass3
e
loadScript("./mining.js")
-- Initialize positions in chain and db + other paratemeters
loadScript("./initialize.js")
loadScript("./utils.js")
loadScript("./events.js")
loadScript("./mining.js")
-- Initialize positions in chain and db + other paratemeters
loadScript("./initialize.js")
loadScript("./utils.js")
loadScript("./events.js")
loadScript("./mining.js")
-- Initialize positions in chain and db + other paratemeters
loadScript("./initialize.js")
loadScript("./utils.js")
loadScript("./events.js")
loadScript("./mining.js")
-- Initialize positions in chain and db + other paratemeters
loadScript("./initialize.js")
loadScript("./utils.js")
loadScript("./events.js")
loadScript("./initialize.js")
loadScript("./utils.js")
loadScript("./events.js")
loadScript("./presetValues.js")
loadScript("./mining.js")
-- Initialize positions in chain and db + other paratemeters
loadScript("./initialize.js")
loadScript("./utils.js")
loadScript("./events.js")
loadScript("mining.js")
loadScript("./mining.js")
-- Initialize positions in chain and db + other paratemeters
loadScript("./initialize.js")
loadScript("./utils.js")
loadScript("./events.js")
-- Start Miner
loadScript("./mining.js")
-- Initialize positions in chain and db + other paratemeters
loadScript("./initialize.js")
loadScript("./utils.js")
loadScript("./events.js")
loadScript("./mining.js")
-- Initialize positions in chain and db + other paratemeters
loadScript("./initialize.js")
loadScript("./utils.js")
loadScript("./events.js")
loadScript("./mining.js")
-- Initialize positions in chain and db + other paratemeters
loadScript("./initialize.js")
loadScript("./utils.js")
loadScript("./events.js")
loadScript("./mining.js")
-- Initialize positions in chain and db + other paratemeters
loadScript("./initialize.js")
loadScript("./utils.js")
loadScript("./events.js")
loadScript("init.js")
printQueryLogFromDB();
admin.startRPC("127.0.0.1", 8547, "*", "web3,db,net,eth");
loadScript("./presetValues.js")
printCreateLogFromDB();
loadScript("init.js")
loadScript("init.js");
startServer
loadScript("init.js");
